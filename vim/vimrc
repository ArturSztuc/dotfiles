"########################################
"SECTION:  PLUGIN SECTION, MESS         #
"########################################
" be iMproved, required
set nocompatible
" required
filetype off                  

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Autocomplete, works with C++
Plugin 'Valloric/YouCompleteMe'

" Hopefully will solve issues with YCM
Plugin 'rdnetto/YCM-Generator'

" Nerd tree, CTRL+n 
Plugin 'The-NERD-tree'

" Shows marks, mapped to F6 F7 DoShowMarks! DoShowMarks NoShowMarks(!)
Plugin 'jacquesbh/vim-showmarks'

" No distractions, just text!
" Just do :Goyo, :Goyo 120/80%/x120/x60%
Plugin 'junegunn/goyo.vim'

" A nice toolbox for edditing .tex files
Plugin 'lervag/vimtex'

" Awesome status bar at the bottom
Plugin 'itchyny/lightline.vim'

" Read git branch
Plugin 'itchyny/vim-gitbranch'

" Switch quickly between .h and .cpp etc.
Plugin 'a.vim'

" Shows a (splitscreen) bar with all the "tags" This means classes, class
" functions etc.
Plugin 'Tagbar'

" cs'" ds"
Plugin 'tpope/vim-surround' 
" Commenting!
Plugin 'scrooloose/nerdcommenter'

" Not to confuse with the above. This toggles bools between True/False and ints
" between 0 and 1 etc.
Bundle 'https://github.com/sagarrakshe/toggle-bool'

Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'wellle/tmux-complete.vim'

" "DOES NOT WORK YET! Perhaps it's because I use YouCpmpleteMe, should remap?"
" "Type e.g. for<tab> to make new for loop, change int i to int someother and
" "press tab again; it will update all variables by itself!
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate'
" Plugin 'honza/vim-snippets'
" imap <C-J> <Plug>snipMateNextOrTrigger

"" Track the engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'rbonvall/snipmate-snippets-bib'

" Indent guides
Plugin 'nathanaelkane/vim-indent-guides'

" Move along a long line with <leader><leader>w / b 
Plugin 'easymotion/vim-easymotion'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<c-q>"
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"

""" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" End configuration, makes the plugins available
call vundle#end()
filetype plugin indent on
filetype plugin on

"########################################
"SECTION:  LEADER
"########################################
let mapleader=","       "Coma is the leader!
let maplocalleader="\\"

"########################################
"SECTION:  PLUGINS' SETUP
"########################################
"
let g:vimtex_view_method = 'zathura'

" Indent guides on startup
let g:indent_guides_enable_on_vim_startup = 1

" YouCompleteMe mods!


" Fallback file, if there's no local one
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

" Do not ask for confirmation of the extra config load
let g:ycm_confirm_extra_conf = 0 
"
" map <C-]> :YcmCompleter GoToImprecise<CR>
" " Go to definition
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" " close autocomplete window after use
" let g:ycm_autoclose_preview_window_after_completion=1
"
"let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
"let g:snipMate.scope_aliases = {}
"let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'

" Otherwise status bar doesn't display
set laststatus=2
" No more -- INSERT -- etc. since we have a status bar
set noshowmode
"set background=light
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ },
      \ }

let g:tmuxcomplete#asyncomplete_source_options = {
            \ 'name':      'tmux',
            \ 'whitelist': ['*'],
            \ 'config': {
            \     'splitmode':      'words',
            \     'filter_prefix':   1,
            \     'show_incomplete': 1,
            \     'sort_candidates': 0,
            \     'scrollback':      0,
            \     'truncate':        0
            \     }
            \ }

let g:tmuxcomplete#trigger = 'omnifunc'

" Commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" NerdTree mods
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.so$', '\.o$', '\~$'] "ignore files in NERDTree

" Switch between .h and .cpp
map <leader>a :A<CR>
" Split and switch between .h/cpp (horizontal)
map <leader>as :AS<CR>
" Split and switch between .h/cpp (vertical)
map <leader>av :AV<CR>
" New tab and switch between .h/cpp (vertical)
map <leader>at :AT<CR>

" vim-showmarks mods
nnoremap <F6> :DoShowMarks!<CR>
nnoremap <F7> :NoShowMarks!<CR>

" Toggle the tagbar
nnoremap <F8> :TagbarToggle<CR>

"########################################
"SECTION:   SPACES, TABS, COLOURS
"########################################
syntax enable           "Syntax processing

set tabstop=2           "Spaces per tab
set shiftwidth=2        "Spaces
set softtabstop=2       "Spaces in tab when editing
set expandtab           "Tabs ARE spaces

"set tw=80               "Number of characters/line
set splitbelow splitright " Split screen in an intuitive way

syntax on

colorscheme solarized 
" Solarized colorscheme basically takes colours from the terminal, so you 
" really need solarized terminal for this to work. I made my own "Papyrus"
" terminal color scheme, which is pulled into vim from terminal by "solarized"
"colorscheme papyrus
" Switch from light to dark

map <F5> :call SwithBackground()<CR>
"call togglebg#map("<F5>")
"map <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
"map <F5> :function Lightline_update

"########################################
"SECTION:   UI CONFIG
"########################################
set number	" shows number lines
set relativenumber      "Shows relative number. Map below
set cursorline	" highlights line
set showcmd " shows last command used at the bottom
filetype indent on      "Load filetype-specific indent files eg. .vim/indent/python.vim
set wildmenu            "visual autocomplete for command menu
set lazyredraw          "Redraw only when we need to.
set showmatch           "Highlight matching [{()}]
set autoindent          "Not needed since we do filetype indent on
" set smartindent

"########################################
"SECTION:   SEARCHING
"########################################
set incsearch           "Search as characters are entered
set hlsearch            "Highlight matches
set ignorecase          "Case insensitivity
set smartcase           "Overrides ignorecase if pattern contains upcase

" Keep search results at the center of screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Remove escape and use jk instead. 
inoremap jk <esc>
inoremap <esc> <nop>

" Run leader and space instead :noh 
nnoremap <silent> <leader><cr> :noh<CR>

"########################################
"SECTION:   FOLDING
"########################################
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldlevel=0
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level

"########################################
"SECTION:   HIGHLIGHTS LAST INSERTED TEXT
"########################################
nnoremap gV `[v`]

" allows cursor change in tmux mode {{{
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

"########################################
"SECTION:   CUSTOM MAPPING
"########################################
" Remove arrows, it's better that way.
nnoremap <Left>   :echoe "Use h"<CR>
nnoremap <Right>  :echoe "Use l"<CR>
nnoremap <Up>     :echoe "Use k"<CR>
nnoremap <Down>   :echoe "Use j"<CR>

" Move to new screen by control + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Toggle between relative number & absolute number mode
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Make j and k move to the next row, not file line
nnoremap j gj
nnoremap k gk

" Move to beginning/end of line
nnoremap B ^
nnoremap E $

" Select all text
nnoremap vA ggVA

" Quick Save
nnoremap <S-s> :w<CR>

" Yank to end of line
nnoremap Y y$

" Delete to the end of line
nnoremap D d$

" Switch between tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" Easiely reate a new tab
nnoremap <leader>tN :tabnew<CR>

" Easiely close a tab
nnoremap <leader>tC :tabclose<CR>

" Easiely move a tab
nnoremap <leader>tm :tabmove<CR>

" Easiely go to next tab
nnoremap <leader>tn :tabnext<CR>

" Easiely go to previous tab
nnoremap <leader>tp :tabprevious<CR>
" }}}

noremap <leader>r :ToggleBool<CR>
set runtimepath += "~/.vim/ibus.vim"
set modeline
set modelines=1

" A functions that toggles vim + lightline
" colourscheme for solarized
function SwithBackground()
  if &l:background == "dark"
    set background=light
  else
    set background=dark
  endif
  call Lightline_update() 
endfunction

" Updates the lightine bar colour depending on 
" dark/light colourscheme of vim. Only works for
" solarized for now...
function! Lightline_update()
  if !exists('g:loaded_lightline')
    return
  endif
  try
    if g:colors_name =~# 'solarized'
      runtime autoload/lightline/colorscheme/solarized.vim
      call lightline#init()
      call lightline#colorscheme()
      call lightline#update()
    endif
    if g:colors_name =~# 'PaperColor'
      runtime autoload/lightline/colorscheme/PaperColor.vim
      call lightline#init()
      call lightline#colorscheme()
      call lightline#update()
    endif
  catch
  endtry
endfunction
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=10
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=0
"let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1
call SwithBackground() " ONLY USE WITH SUCLKESS TERMINAL!

