"########################################
"SECTION:  PLUGIN SECTION, MESS         #
"########################################
" be iMproved, required
set nocompatible
" required
filetype off                  

" Loads the plugins
source ~/.vim/plugs.vim



"########################################
"SECTION:  LEADER
"########################################
let mapleader=","       "Coma is the leader!
let maplocalleader="\\"

"########################################
"SECTION:  PLUGINS' SETUP
"########################################

" Sets the plugins
source ~/.vim/plugsettings.vim

" NerdTree mods
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.so$', '\.o$', '\~$'] "ignore files in NERDTree

" Switch between .h and .cpp
map <leader>a :A<CR>
" Split and switch between .h/cpp (horizontal)
map <leader>as :AS<CR>
" Split and switch between .h/cpp (vertical)
map <leader>av :AV<CR>
" New tab and switch between .h/cpp (vertical)
map <leader>at :AT<CR>

" vim-showmarks mods
nnoremap <F6> :DoShowMarks!<CR>
nnoremap <F7> :NoShowMarks!<CR>

" Toggle the tagbar
nnoremap <F8> :TagbarToggle<CR>

"########################################
"SECTION:   SPACES, TABS, COLOURS
"########################################

" syntax processing
syntax enable

" Spaces per tab
set tabstop=2

" Spaces
set shiftwidth=2

" Spaces in tab when editing
set softtabstop=2

" Tabs ARE spaces
set expandtab           

" Split screen in an intuitive way
set splitbelow splitright

" Start syntax processing
syntax on

" Solarized colorscheme basically takes colours from the terminal, so you 
" really need solarized terminal for this to work. I made my own "Papyrus"
" terminal color scheme, which is pulled into vim from terminal by "solarized"
colorscheme solarized 
"colorscheme deus

" Switch from light to dark
map <F5> :call SwithBackground()<CR>

"########################################
"SECTION:   UI CONFIG
"########################################

set number	        " Shows number lines
set relativenumber  " Shows relative number. Map below
set cursorline	    " Highlights line
set cursorcolumn	    " Highlights column 
set showcmd         " Shows last command used at the bottom
filetype indent on  " Load filetype-specific indent files eg. .vim/indent/python.vim
set wildmenu        " Visual autocomplete for command menu
set lazyredraw      " Redraw only when we need to.
set showmatch       " Highlight matching [{()}]
set autoindent      " Not needed since we do filetype indent on
" set smartindent

"########################################
"SECTION:   SEARCHING
"########################################
set incsearch           " Search as characters are entered
set hlsearch            " Highlight matches
set ignorecase          " Case insensitivity
set smartcase           " Overrides ignorecase if pattern contains upcase

" Keep search results at the center of screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Remove escape and use jk instead. 
inoremap jk <esc>
inoremap <esc> <nop>

map sp :set spell! spelllang=en_gb<CR>
map sl :setlocal spell! spelllang=en_gb<CR>

" Run leader and space instead :noh 
nnoremap <silent> <leader><cr> :noh<CR>

"########################################
"SECTION:   FOLDING
"########################################
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldlevel=0
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level

"########################################
"SECTION:   HIGHLIGHTS LAST INSERTED TEXT
"########################################
nnoremap gV `[v`]

" allows cursor change in tmux mode {{{
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

"########################################
"SECTION:   CUSTOM MAPPING
"########################################
" Remove arrows, it's better that way.
nnoremap <Left>   :echoe "Stop being stupid, use h"<CR>
nnoremap <Right>  :echoe "Stop being stupid, use l"<CR>
nnoremap <Up>     :echoe "Stop being stupid, use k"<CR>
nnoremap <Down>   :echoe "Stop being stupid, use j"<CR>

" Move to new screen by control + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Toggle between relative number & absolute number mode
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Make j and k move to the next row, not file line
nnoremap j gj
nnoremap k gk

" Move to beginning/end of line
nnoremap B ^
nnoremap E $

" Select all text
nnoremap vA ggVA

" Quick Save
nnoremap <S-s> :w<CR>

" Yank to end of line
nnoremap Y y$

" Delete to the end of line
nnoremap D d$

" Switch between tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" Easiely reate a new tab
nnoremap <leader>tN :tabnew<CR>

" Easiely close a tab
nnoremap <leader>tC :tabclose<CR>

" Easiely move a tab
nnoremap <leader>tm :tabmove<CR>

" Easiely go to next tab
nnoremap <leader>tn :tabnext<CR>

" Easiely go to previous tab
nnoremap <leader>tp :tabprevious<CR>

nnoremap <leader>] :bnext<CR>
nnoremap <leader>[ :bprevious<CR>
nnoremap <leader>' :bnext<CR>:redraw<CR>:ls<CR>
nnoremap <leader># :bprevious<CR>:redraw<CR>:ls<CR>

noremap <leader>r :ToggleBool<CR>
set runtimepath += "~/.vim/ibus.vim"
set modeline
set modelines=1

" A functions that toggles vim + lightline
" colourscheme for solarized
function SwithBackground()
  if &l:background == "dark"
    set background=light
  else
    set background=dark
  endif
  call Lightline_update() 
endfunction

" Updates the lightine bar colour depending on 
" dark/light colourscheme of vim. Only works for
" solarized for now...
function! Lightline_update()
  if !exists('g:loaded_lightline')
    return
  endif
  try
    if g:colors_name =~# 'solarized'
      runtime autoload/lightline/colorscheme/solarized.vim
      call lightline#init()
      call lightline#colorscheme()
      call lightline#update()
    endif
    if g:colors_name =~# 'PaperColor'
      runtime autoload/lightline/colorscheme/PaperColor.vim
      call lightline#init()
      call lightline#colorscheme()
      call lightline#update()
    endif
  catch
  endtry
endfunction
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=10
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=0
"let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1
call SwithBackground() " ONLY USE WITH SUCLKESS TERMINAL!

