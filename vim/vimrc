" PLUGIN SECTION, MESS {{{
" Vundle vimrc
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
"
let g:ycm_confirm_extra_conf = 0 
"
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Autocomplete, works with C++
Plugin 'Valloric/YouCompleteMe'

" Nerd tree, CTRL+n 
Plugin 'The-NERD-tree'

" Shows marks, mapped to F6 F7
" DoShowMarks! DoShowMarks NoShowMarks(!)
Plugin 'jacquesbh/vim-showmarks'

" No distractions, just text!
" Just do :Goyo, :Goyo 120/80%/x120/x60%
Plugin 'junegunn/goyo.vim'

" Awesome status bar at the bottom
Plugin 'itchyny/lightline.vim'

" Read git branch
Plugin 'itchyny/vim-gitbranch'

" Colourschemes!
"Plugin 'Nequo/vim-allomancer' " Doesn't support 256 col yet!
"Plugin 'morhetz/gruvbox'      " Issue with white (it's yellow?)
"Plugin 'NLKNguyen/papercolor-theme'
"Plugin 'nightsense/snow'

" Toggles booleans, binary etc.
" <leader>r
Bundle 'https://github.com/sagarrakshe/toggle-bool'

" Otherwise status bar doesn't display
set laststatus=2
" No more -- INSERT -- etc. since we have a status bar
set noshowmode
"set background=light
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ },
      \ }
" End configuration, makes the plugins available
call vundle#end()
filetype plugin indent on

" YouCompleteMe mods!
map <C-]> :YcmCompleter GoToImprecise<CR>
" Go to definition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" close autocomplete window after use
let g:ycm_autoclose_preview_window_after_completion=1

" NerdTree mods
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.so$', '\.o$', '\~$'] "ignore files in NERDTree
" autocmd vimenter *  NERDTree

" vim-showmarks mods
nnoremap <F6> :DoShowMarks!<CR>
nnoremap <F7> :NoShowMarks!<CR>

" }}}
" LEADER SHORTCUTS {{{
let mapleader=","       "Coma is the leader!
" }}}
" SPACES, TABS, COLOURS {{{
syntax enable           "Syntax processing

set tabstop=2           "Spaces per tab
set shiftwidth=2        "Spaces
set softtabstop=2       "Spaces in tab when editing
set expandtab           "Tabs ARE spaces

set tw=80               "Number of characters/line
set splitbelow splitright " Split screen in an intuitive way

syntax on
colorscheme solarized 
" Solarized colorscheme basically takes colours from the terminal, so you 
" really need solarized terminal for this to work. I made my own "Papyrus"
" terminal color scheme, which is pulled into vim from terminal by "solarized"
"colorscheme papyrus

" Switch from light to dark
map <F5> :call SwithBackground()<CR>
"call togglebg#map("<F5>")
"map <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
"map <F5> :function Lightline_update
"colorscheme phd
" }}}
" UI CONFIG {{{
set number	" shows number lines
set relativenumber      "Shows relative number. Map below
set cursorline	" highlights line
set showcmd " shows last command used at the bottom
filetype indent on      "Load filetype-specific indent files eg. .vim/indent/python.vim
set wildmenu            "visual autocomplete for command menu
set lazyredraw          "Redraw only when we need to.
set showmatch           "Highlight matching [{()}]
set autoindent          "Not needed since we do filetype indent on
" set smartindent
" }}}
"SEARCHING {{{
set incsearch           "Search as characters are entered
set hlsearch            "Highlight matches
set ignorecase          "Case insensitivity
set smartcase           "Overrides ignorecase if pattern contains upcase

" Keep search results at the center of screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Remove escape and use jk instead. 
inoremap jk <esc>
inoremap <esc> <nop>

" Run leader and space instead :noh 
nnoremap <silent> <leader><cr> :noh<CR>


" }}}
" FOLDING {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldlevel=0
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level
" }}}
" HIGHLIGHTS LAST INSERTED TEXT {{{
nnoremap gV `[v`]
" }}}
" allows cursor change in tmux mode {{{
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

" MAPPING {{{
" Remove arrows, it's better that way.
nnoremap <Left>   :echoe "Use h"<CR>
nnoremap <Right>  :echoe "Use l"<CR>
nnoremap <Up>     :echoe "Use k"<CR>
nnoremap <Down>   :echoe "Use j"<CR>

" Move to new screen by control + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Toggle between relative number & absolute number mode
nnoremap <silent> <leader>nb :set relativenumber!<CR>

" Make j and k move to the next row, not file line
nnoremap j gj
nnoremap k gk

" Move to beginning/end of line
nnoremap B ^
nnoremap E $

" Select all text
nnoremap vA ggVA

" Quick Save
nnoremap <S-s> :w<CR>

" Yank to end of line
nnoremap Y y$

" Delete to the end of line
nnoremap D d$

" Switch between tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" Easiely reate a new tab
nnoremap <leader>tN :tabnew<CR>

" Easiely close a tab
nnoremap <leader>tc :tabclose<CR>

" Easiely move a tab
nnoremap <leader>tm :tabmove<CR>

" Easiely go to next tab
nnoremap <leader>tn :tabnext<CR>

" Easiely go to previous tab
nnoremap <leader>tp :tabprevious<CR>
" }}}

noremap <leader>r :ToggleBool<CR>
set runtimepath += "~/.vim/ibus.vim"
set modeline
set modelines=1

call SwithBackground()
call SwithBackground()
" A functions that toggles vim + lightline
" colourscheme for solarized
function SwithBackground()
  if &l:background == "dark"
    set background=light
  else
    set background=dark
  endif
  call Lightline_update() 
endfunction

" Updates the lightine bar colour depending on 
" dark/light colourscheme of vim. Only works for
" solarized for now...
function! Lightline_update()
        if !exists('g:loaded_lightline')
                return
        endif
        try
                if g:colors_name =~# 'solarized'
                        runtime autoload/lightline/colorscheme/solarized.vim
                        call lightline#init()
                        call lightline#colorscheme()
                        call lightline#update()
                endif
                if g:colors_name =~# 'PaperColor'
                        runtime autoload/lightline/colorscheme/PaperColor.vim
                        call lightline#init()
                        call lightline#colorscheme()
                        call lightline#update()
                endif
        catch
        endtry
endfunction

" vim:set foldmethod=marker foldlevel=0:
